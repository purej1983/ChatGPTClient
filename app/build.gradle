plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
    id 'jacoco'
}

jacoco {
    // if you are using java 11 then jacoco version that support it is v0.8.7
    toolVersion = "0.8.7"

    // this is where you find html/xml/csv report for your unit test coverage check
    reportsDirectory = file("$buildDir/reports/coverage")
}

// reading api secret
def apikeyPropertiesFile = rootProject.file("apikey.properties")
def apikeyProperties = new Properties()
apikeyProperties.load(new FileInputStream(apikeyPropertiesFile))

android {
    compileSdk 33

    defaultConfig {
        applicationId "com.thomaslam.chatgptclient"
        minSdk 23
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        buildConfigField("String", "CHAT_GPT_API_KEY", apikeyProperties['CHAT_GPT_API_KEY'])

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas")
            }
        }
    }

    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }


    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.activity:activity-compose:1.3.1'
    implementation 'androidx.test.ext:junit-ktx:1.1.5'
    implementation 'androidx.room:room-testing:2.5.1'
    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.mockito:mockito-core:4.+"
    testImplementation "org.mockito.kotlin:mockito-kotlin:4.+"
    testImplementation "org.mockito:mockito-inline:4.+"
    testImplementation "io.mockk:mockk:1.13.5"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6"
    testImplementation 'app.cash.turbine:turbine:0.13.0'
    testImplementation "com.google.truth:truth:1.1.3"
    androidTestImplementation "com.google.truth:truth:1.1.3"
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"

    //jetpack compose navgation
    implementation "androidx.navigation:navigation-compose:$nav_version"

    //hilt
    implementation "com.google.dagger:hilt-android:2.44"
    kapt "com.google.dagger:hilt-compiler:2.44"
    implementation "androidx.hilt:hilt-navigation-compose:1.0.0-alpha03"

    //Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$httplogging_version"
    testImplementation "com.squareup.okhttp3:mockwebserver:4.9.3"
    implementation "com.google.code.gson:gson:$json_version"

    //Room
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

}

tasks.withType(Test) {
    // to exclude jdk classes so not included in the jacoco unit test report
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: ['jacocoDebug']) {
    group = "Verification"
    description = "Check code coverage"

    onlyIf = {
        true
    }

    violationRules {
        rule {
            limit {
                // minimum coverage that we would like to have
                // ideally the value is 1 which is 100% coverage
                minimum = 0.3
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }

    // classes that WILL NOT BE checked on unit test coverage check
    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/*AdapterFactory*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*'
    ]

    // classes that you WILL BE checked on unit test coverage check
    classDirectories.from = fileTree(
            dir: "$buildDir/intermediates/classes/debug",
            excludes: excludes
    ) + fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: excludes
    )

    sourceDirectories.from = [
            android.sourceSets.main.java.srcDirs,
            "src/main/kotlin"
    ]

    // this is important! Make sure the testDebugUnitTest.exec is accessible
    // otherwise this task will return coverage check always 0
    executionData.from = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec"
    ])
}